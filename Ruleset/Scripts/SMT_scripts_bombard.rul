extended:
  tagsFile: Ruleset/Scripts/SMT_tags.rul

  scripts:
    createItem:
      - new: SMTS_strike_ammo_init   # Counts Strike ammo available for use
        offset: 10
        code: |
          var int itemVal;
          var int temp;

          battle_game.getTurn temp;
          if neq temp 0;
            return;
          end;
          battle_game.getTurnSide temp;
          if neq temp FACTION_PLAYER; #only consider items at start of battle
            return;
          end;

          item.getTag itemVal Tag.BOMBARD_AMMO_ITEM; # count ammo
          if eq itemVal 1; # Orbital Strikes
            battle_game.getTag temp Tag.SMT_STRIKE_ORBITAL_AMMO;
            add temp 1; # +1 to count
            battle_game.setTag Tag.SMT_STRIKE_ORBITAL_AMMO temp;
            #debug_log "StrikeAmmo (Orbital Strike) " temp;
          else eq itemVal 2; # CAS Strikes
            battle_game.getTag temp Tag.SMT_STRIKE_LIGHTNING_AMMO;
            add temp 1; # +1 to count
            battle_game.setTag Tag.SMT_STRIKE_LIGHTNING_AMMO temp;
            #debug_log "StrikeAmmo (CAS) " temp;
          else eq itemVal 3; # Stormtalon Strikes
            battle_game.getTag temp Tag.SMT_STRIKE_STORM_AMMO;
            add temp 1; # +1 to count
            battle_game.setTag Tag.SMT_STRIKE_STORM_AMMO temp;
            #debug_log "StrikeAmmo (Stormtalon) " temp;
          else eq itemVal 4; # Orbital Laser Strikes
            battle_game.getTag temp Tag.SMT_STRIKE_LANCE_AMMO;
            add temp 1; # +1 to count
            battle_game.setTag Tag.SMT_STRIKE_LANCE_AMMO temp;
            #debug_log "StrikeAmmo (Orbital Laser) " temp;
          else eq itemVal 5; # Whirlwind Strikes
            battle_game.getTag temp Tag.SMT_STRIKE_WHIRL_AMMO;
            add temp 1; # +1 to count
            battle_game.setTag Tag.SMT_STRIKE_WHIRL_AMMO temp;
            #debug_log "StrikeAmmo (Whirlwind) " temp;
          else eq itemVal 6; # Marine Reinforcements
            battle_game.getTag temp Tag.SMT_STRIKE_MARINEDROP_AMMO;
            add temp 1; # +1 to count
            battle_game.setTag Tag.SMT_STRIKE_MARINEDROP_AMMO temp;
            #debug_log "StrikeAmmo (Whirlwind) " temp;
          else eq itemVal 7; # Scion Reinforcements
            battle_game.getTag temp Tag.SMT_STRIKE_SCIONDROP_AMMO;
            add temp 1; # +1 to count
            battle_game.setTag Tag.SMT_STRIKE_SCIONDROP_AMMO temp;
            #debug_log "StrikeAmmo (Whirlwind) " temp;
          end;

          battle_game.setTag Tag.SMT_STRIKE_ORBITAL_COOLDOWN 0; # reset any cooldowns in case of multi-stage missions
          battle_game.setTag Tag.SMT_STRIKE_LIGHTNING_COOLDOWN 0;
          battle_game.setTag Tag.SMT_STRIKE_STORM_COOLDOWN 0;
          battle_game.setTag Tag.SMT_STRIKE_LANCE_COOLDOWN 0;
          battle_game.setTag Tag.SMT_STRIKE_WHIRL_COOLDOWN 0;
          battle_game.setTag Tag.SMT_STRIKE_MARINEDROP_COOLDOWN 0;
          battle_game.setTag Tag.SMT_STRIKE_SCIONDROP_COOLDOWN 0;

          #debug_log "StrikeAmmo Cooldowns reset";
          return;

    healUnit:
      - new: SMTS_strike_callin_med # activates strike targeter for next turn (Medkit base)
        offset: 20
        code: |
          var int strikeType;
          var int tuCost;
          var int ammoCheck;
          var int ammoTotal;
          var int turn;
          var int temp;

          item.getTag strikeType Tag.BOMBARD_CALLIN_REMOTE;
          if le strikeType 0;
            return;
          end;

          item.setPainKillerQuantity 10; # infinite use
          battle_game.getTag temp Tag.SMT_STRIKE_ACTIVE_SPAWN; # check that a strike isn't already called
          item.getActionCost.getTimeUnits tuCost actor battle_action_use;
          actor.addTimeUnits tuCost; # refund cost if Strike fails
          #debug_log "StrikeCallin PingMed " temp tuCost;
          if gt temp 0;
            battle_game.flashMessage "STR_STRIKE_OVERLAP"; # 'Firesupport has already been requested this turn'
            #debug_log "StrikeCallin Active " temp;
            return;
          end;
          battle_game.getTag temp Tag.SMT_STRIKE_COUNT; # check that strikes exist on the map
          if le temp 0;
            battle_game.flashMessage "STR_STRIKE_EMPTY"; # "Firesupport is unavailable"
            #debug_log "StrikeCallin NoStrikes " temp;
            return;
          end;

          item.getTag ammoCheck Tag.BOMBARD_AMMO_REQUIRED;
          battle_game.getTurn turn;
          if eq strikeType 1; # Orbital Barrage
            battle_game.getTag ammoTotal Tag.SMT_STRIKE_ORBITAL_AMMO; # check we have this strike available
            if and gt ammoCheck 0 le ammoTotal 0;
              battle_game.flashMessage "STR_STRIKE_NOAMMO"; # "Firesupport is unavailable"
              #debug_log "StrikeCallin (Orbital) NoStrikes " ammoTotal;
              return;
            end;
            battle_game.getTag temp Tag.SMT_STRIKE_ORBITAL_COOLDOWN; # check this strike is not on cooldown
            if gt temp turn;
              sub temp turn; # get # of turns until cooldown expires
              battle_game.flashMessage "STR_STRIKE_COOLDOWN" temp; # 'This strike is on cooldown. Turns remaining: {0}'
              #debug_log "StrikeCallin (Orbital) Cooldown " temp;
              return;
            end;
            item.getTag temp Tag.BOMBARD_COOLDOWN; # set cooldown for this strike type
            add temp turn;
            battle_game.setTag Tag.SMT_STRIKE_ORBITAL_COOLDOWN temp;
          else or eq strikeType 2 eq strikeType 3 eq strikeType 4; # CAS Bolter/Rocket/Napalm
            battle_game.getTag ammoTotal Tag.SMT_STRIKE_LIGHTNING_AMMO; # check we have this strike available
            if and gt ammoCheck 0 le ammoTotal 0;
              battle_game.flashMessage "STR_STRIKE_NOAMMO"; # "Firesupport is unavailable"
              #debug_log "StrikeCallin (CAS-B) NoStrikes " ammoTotal;
              return;
            end;
            battle_game.getTag temp Tag.SMT_STRIKE_LIGHTNING_COOLDOWN; # check this strike is not on cooldown
            if gt temp turn;
              sub temp turn; # get # of turns until cooldown expires
              battle_game.flashMessage "STR_STRIKE_COOLDOWN" temp; # 'This strike is on cooldown. Turns remaining: {0}'
              #debug_log "StrikeCallin (CAS-B) Cooldown " temp;
              return;
            end;
            item.getTag temp Tag.BOMBARD_COOLDOWN; # set cooldown for this strike type
            add temp turn;
            battle_game.setTag Tag.SMT_STRIKE_LIGHTNING_COOLDOWN temp;
          else eq strikeType 5; # Stormtalon
            battle_game.getTag ammoTotal Tag.SMT_STRIKE_STORM_AMMO; # check we have this strike available
            if and gt ammoCheck 0 le ammoTotal 0;
              battle_game.flashMessage "STR_STRIKE_NOAMMO"; # "Firesupport is unavailable"
              #debug_log "StrikeCallin (Stormtalon) NoStrikes " ammoTotal;
              return;
            end;
            battle_game.getTag temp Tag.SMT_STRIKE_STORM_COOLDOWN; # check this strike is not on cooldown
            if gt temp turn;
              sub temp turn; # get # of turns until cooldown expires
              battle_game.flashMessage "STR_STRIKE_COOLDOWN" temp; # 'This strike is on cooldown. Turns remaining: {0}'
              #debug_log "StrikeCallin (Stormtalon) Cooldown " temp;
              return;
            end;
            item.getTag temp Tag.BOMBARD_COOLDOWN; # set cooldown for this strike type
            add temp turn;
            battle_game.setTag Tag.SMT_STRIKE_STORM_COOLDOWN temp;
          else eq strikeType 6; # Orbital Lance
            battle_game.getTag ammoTotal Tag.SMT_STRIKE_LANCE_AMMO; # check we have this strike available
            if and gt ammoCheck 0 le ammoTotal 0;
              battle_game.flashMessage "STR_STRIKE_NOAMMO"; # "Firesupport is unavailable"
              #debug_log "StrikeCallin (Lance) NoStrikes " ammoTotal;
              return;
            end;
            battle_game.getTag temp Tag.SMT_STRIKE_LANCE_COOLDOWN; # check this strike is not on cooldown
            if gt temp turn;
              sub temp turn; # get # of turns until cooldown expires
              battle_game.flashMessage "STR_STRIKE_COOLDOWN" temp; # 'This strike is on cooldown. Turns remaining: {0}'
              #debug_log "StrikeCallin (Lance) Cooldown " temp;
              return;
            end;
            item.getTag temp Tag.BOMBARD_COOLDOWN; # set cooldown for this strike type
            add temp turn;
            battle_game.setTag Tag.SMT_STRIKE_LANCE_COOLDOWN temp;
          else eq strikeType 7; # Whirlwind
            battle_game.getTag ammoTotal Tag.SMT_STRIKE_WHIRL_AMMO; # check we have this strike available
            if and gt ammoCheck 0 le ammoTotal 0;
              battle_game.flashMessage "STR_STRIKE_NOAMMO"; # "Firesupport is unavailable"
              #debug_log "StrikeCallin (Lance) NoStrikes " ammoTotal;
              return;
            end;
            battle_game.getTag temp Tag.SMT_STRIKE_WHIRL_COOLDOWN; # check this strike is not on cooldown
            if gt temp turn;
              sub temp turn; # get # of turns until cooldown expires
              battle_game.flashMessage "STR_STRIKE_COOLDOWN" temp; # 'This strike is on cooldown. Turns remaining: {0}'
              #debug_log "StrikeCallin (Lance) Cooldown " temp;
              return;
            end;
            item.getTag temp Tag.BOMBARD_COOLDOWN; # set cooldown for this strike type
            add temp turn;
            battle_game.setTag Tag.SMT_STRIKE_WHIRL_COOLDOWN temp;
          else eq strikeType 8; # Marine Drop
            battle_game.getTag ammoTotal Tag.SMT_STRIKE_MARINEDROP_AMMO; # check we have this strike available
            if and gt ammoCheck 0 le ammoTotal 0;
              battle_game.flashMessage "STR_STRIKE_NOAMMO"; # "Firesupport is unavailable"
              #debug_log "StrikeCallin (Lance) NoStrikes " ammoTotal;
              return;
            end;
            battle_game.getTag temp Tag.SMT_STRIKE_MARINEDROP_COOLDOWN; # check this strike is not on cooldown
            if gt temp turn;
              sub temp turn; # get # of turns until cooldown expires
              battle_game.flashMessage "STR_STRIKE_COOLDOWN" temp; # 'This strike is on cooldown. Turns remaining: {0}'
              #debug_log "StrikeCallin (Lance) Cooldown " temp;
              return;
            end;
            item.getTag temp Tag.BOMBARD_COOLDOWN; # set cooldown for this strike type
            add temp turn;
            battle_game.setTag Tag.SMT_STRIKE_MARINEDROP_COOLDOWN temp;
          else eq strikeType 9; # Scion Drop
            battle_game.getTag ammoTotal Tag.SMT_STRIKE_SCIONDROP_AMMO; # check we have this strike available
            if and gt ammoCheck 0 le ammoTotal 0;
              battle_game.flashMessage "STR_STRIKE_NOAMMO"; # "Firesupport is unavailable"
              #debug_log "StrikeCallin (Lance) NoStrikes " ammoTotal;
              return;
            end;
            battle_game.getTag temp Tag.SMT_STRIKE_SCIONDROP_COOLDOWN; # check this strike is not on cooldown
            if gt temp turn;
              sub temp turn; # get # of turns until cooldown expires
              battle_game.flashMessage "STR_STRIKE_COOLDOWN" temp; # 'This strike is on cooldown. Turns remaining: {0}'
              #debug_log "StrikeCallin (Lance) Cooldown " temp;
              return;
            end;
            item.getTag temp Tag.BOMBARD_COOLDOWN; # set cooldown for this strike type
            add temp turn;
            battle_game.setTag Tag.SMT_STRIKE_SCIONDROP_COOLDOWN temp;
          end;

          battle_game.setTag Tag.SMT_STRIKE_ACTIVE strikeType; # request strike callin
          battle_game.setTag Tag.SMT_STRIKE_ACTIVE_SPAWN strikeType; # request strike callin
          if gt ammoCheck 0; # check if ammo used
            sub ammoTotal 1;
            limit_lower ammoTotal 0;
            battle_game.flashMessage "STR_STRIKE_ACTIVE_AMMO" ammoTotal; # 'Fire support request confirmed Calldowns remaining: X'
            battle_game.setTag Tag.SMT_STRIKE_AMMO_USED ammoCheck; # set ammo to be consumed
          else;
            battle_game.flashMessage "STR_STRIKE_ACTIVE" ammoTotal; # 'Fire support request confirmed'
          end;
          actor.getTimeUnits temp;
          sub temp tuCost;
          actor.setTimeUnits temp; # reapply TU cost
          #debug_log "StrikeCallin Active Type: " strikeType temp;
          return;

      - new: SMTS_strike_setPosition # locks strike targeter in place and gives it ammo
        offset: 21
        code: |
          var int temp;

          item.getTag temp Tag.BOMBARD_AMMO_LOADER;
          if le temp 0;
            return;
          end;

          #debug_log "StrikeAmmoload Ping " temp;
          actor.getManaMax temp;
          actor.setMana temp;
          actor.setTimeUnits 100;
          actor.setEnergy 0;
          return;

    damageUnit:
      - new: SMTS_strike_callin_gun # activates strike targeter for next turn (Gun base - Multichoice)
        offset: 85
        code: |
          var int strikeType;
          var int tuCost;
          var int tuCostTarget;
          var int ammoCheck;
          var int ammoTotal;
          var int turn;
          var int temp;

          damaging_item.getTag strikeType Tag.BOMBARD_CALLIN_REMOTE;
          if eq strikeType 0;
            return;
          end;

          damaging_item.getActionCost.getTimeUnits tuCost attacker BA_AIMEDSHOT;
          attacker.addTimeUnits tuCost; # refund cost if Strike fails
          unit.getFaction temp;
          #debug_log "StrikeCallin PingGun " temp tuCost;
          if neq temp FACTION_PLAYER;
            battle_game.flashMessage "STR_STRIKE_FRIENDLY"; # 'Must target a friendly unit'
            return;
          end;

          battle_game.getTag temp Tag.SMT_STRIKE_ACTIVE_SPAWN; # check that a strike isn't already called
          if gt temp 0;
            battle_game.flashMessage "STR_STRIKE_OVERLAP"; # 'Firesupport has already been requested this turn'
            #debug_log "StrikeCallin Active " temp;
            return;
          end;
          battle_game.getTag temp Tag.SMT_STRIKE_COUNT; # check that strikes exist on the map
          if le temp 0;
            battle_game.flashMessage "STR_STRIKE_EMPTY"; # "Firesupport is unavailable"
            #debug_log "StrikeCallin NoStrikes " temp;
            return;
          end;
          damaging_item.getActionCost.getTimeUnits tuCostTarget unit BA_AIMEDSHOT; #check the target unit has enough TUs
          unit.getTimeUnits temp;
          if eq attacker unit;
            mul tuCostTarget 2; # make sure unit can pay for both halves of TU cost when targeting self
            set tuCost 0;
            #debug_log "StrikeCallin Selftarget " tuCost tuCostTarget;
          end;
          if le temp tuCostTarget;
            battle_game.flashMessage "STR_STRIKE_LOWTUS" tuCostTarget; # "Target Unit doesn't have enough TUs! Required: {0}"
            #debug_log "StrikeCallin NoStrikes " temp tuCostTarget;
            return;
          end;

          if eq battle_action BA_SNAPSHOT; # adjust strike type based on firing selection
            add strikeType 1;
          else eq battle_action BA_AUTOSHOT;
            add strikeType 2;
          end;

          damaging_item.getTag ammoCheck Tag.BOMBARD_AMMO_REQUIRED;
          battle_game.getTurn turn;
          if eq strikeType 1; # Orbital Barrage
            battle_game.getTag ammoTotal Tag.SMT_STRIKE_ORBITAL_AMMO; # check we have this strike available
            if and gt ammoCheck 0 le ammoTotal 0;
              battle_game.flashMessage "STR_STRIKE_NOAMMO"; # "Firesupport is unavailable"
              #debug_log "StrikeCallin (Orbital) NoStrikes " ammoTotal;
              return;
            end;
            battle_game.getTag temp Tag.SMT_STRIKE_ORBITAL_COOLDOWN; # check this strike is not on cooldown
            if gt temp turn;
              sub temp turn; # get # of turns until cooldown expires
              battle_game.flashMessage "STR_STRIKE_COOLDOWN" temp; # 'This strike is on cooldown. Turns remaining: {0}'
              #debug_log "StrikeCallin (Orbital) Cooldown " temp turn;
              return;
            end;
            damaging_item.getTag temp Tag.BOMBARD_COOLDOWN; # set cooldown for this strike type
            add temp turn;
            battle_game.setTag Tag.SMT_STRIKE_ORBITAL_COOLDOWN temp;
          else or eq strikeType 2 eq strikeType 3 eq strikeType 4; # CAS Bolter/Rocket/Napalm
            battle_game.getTag ammoTotal Tag.SMT_STRIKE_LIGHTNING_AMMO; # check we have this strike available
            if and gt ammoCheck 0 le ammoTotal 0;
              battle_game.flashMessage "STR_STRIKE_NOAMMO"; # "Firesupport is unavailable"
              #debug_log "StrikeCallin (CAS-B) NoStrikes " ammoTotal;
              return;
            end;
            battle_game.getTag temp Tag.SMT_STRIKE_LIGHTNING_COOLDOWN; # check this strike is not on cooldown
            if gt temp turn;
              sub temp turn; # get # of turns until cooldown expires
              battle_game.flashMessage "STR_STRIKE_COOLDOWN" temp; # 'This strike is on cooldown. Turns remaining: {0}'
              #debug_log "StrikeCallin (CAS-B) Cooldown " temp turn;
              return;
            end;
            damaging_item.getTag temp Tag.BOMBARD_COOLDOWN; # set cooldown for this strike type
            add temp turn;
            battle_game.setTag Tag.SMT_STRIKE_LIGHTNING_COOLDOWN temp;
          else eq strikeType 5; # Stormtalon
            battle_game.getTag ammoTotal Tag.SMT_STRIKE_STORM_AMMO; # check we have this strike available
            if and gt ammoCheck 0 le ammoTotal 0;
              battle_game.flashMessage "STR_STRIKE_NOAMMO"; # "Firesupport is unavailable"
              #debug_log "StrikeCallin (Stormtalon) NoStrikes " ammoTotal;
              return;
            end;
            battle_game.getTag temp Tag.SMT_STRIKE_STORM_COOLDOWN; # check this strike is not on cooldown
            if gt temp turn;
              sub temp turn; # get # of turns until cooldown expires
              battle_game.flashMessage "STR_STRIKE_COOLDOWN" temp; # 'This strike is on cooldown. Turns remaining: {0}'
              #debug_log "StrikeCallin (Stormtalon) Cooldown " temp;
              return;
            end;
            damaging_item.getTag temp Tag.BOMBARD_COOLDOWN; # set cooldown for this strike type
            add temp turn;
            battle_game.setTag Tag.SMT_STRIKE_STORM_COOLDOWN temp;
          else eq strikeType 6; # Orbital Lance
            battle_game.getTag ammoTotal Tag.SMT_STRIKE_LANCE_AMMO; # check we have this strike available
            if and gt ammoCheck 0 le ammoTotal 0;
              battle_game.flashMessage "STR_STRIKE_NOAMMO"; # "Firesupport is unavailable"
              #debug_log "StrikeCallin (Lance) NoStrikes " ammoTotal;
              return;
            end;
            battle_game.getTag temp Tag.SMT_STRIKE_LANCE_COOLDOWN; # check this strike is not on cooldown
            if gt temp turn;
              sub temp turn; # get # of turns until cooldown expires
              battle_game.flashMessage "STR_STRIKE_COOLDOWN" temp; # 'This strike is on cooldown. Turns remaining: {0}'
              #debug_log "StrikeCallin (Lance) Cooldown " temp;
              return;
            end;
            damaging_item.getTag temp Tag.BOMBARD_COOLDOWN; # set cooldown for this strike type
            add temp turn;
            battle_game.setTag Tag.SMT_STRIKE_LANCE_COOLDOWN temp;
          end;

          battle_game.setTag Tag.SMT_STRIKE_ACTIVE strikeType; # request strike callin
          battle_game.setTag Tag.SMT_STRIKE_ACTIVE_SPAWN strikeType; # request strike callin
          if gt ammoCheck 0;
            sub ammoTotal 1;
            limit_lower ammoTotal 0;
            battle_game.flashMessage "STR_STRIKE_ACTIVE_AMMO" ammoTotal; # 'Fire support request confirmed Calldowns remaining: X'
            battle_game.setTag Tag.SMT_STRIKE_AMMO_USED ammoCheck;
          else;
            battle_game.flashMessage "STR_STRIKE_ACTIVE"; # 'Fire support request confirmed'
          end;
          attacker.getTimeUnits temp;
          sub temp tuCost;
          attacker.setTimeUnits temp; # reapply TU cost
          unit.getTimeUnits temp;
          sub temp tuCostTarget;
          unit.setTimeUnits temp; # support unit gets TU cost as well
          #debug_log "StrikeCallin Active Type: " strikeType temp;
          return;


    newTurnItem:
      - new: SMTS_strike_spawner_count # Handles strike spawner count and activation
        offset: 95
        code: |
          var int temp;

          battle_game.getTag temp Tag.SMT_STRIKE_COUNT;
          if and neq temp 0 eq side FACTION_HOSTILE; # on enemy turns clear strike counter (needed for two-part missions where p2 does not have strike counters)
            battle_game.setTag Tag.SMT_STRIKE_COUNT 0;
          end;

          item.getTag temp Tag.BOMBARD_SPAWNER_ITEM;
          if eq temp 0;
            return;
          end;

          if eq side FACTION_PLAYER; # on player turns, count all available strike tokens
            battle_game.getTag temp Tag.SMT_STRIKE_COUNT;
            add temp 1; # +1 to count
            battle_game.setTag Tag.SMT_STRIKE_COUNT temp;
            #debug_log "StrikeCounter " temp;
          else eq side FACTION_HOSTILE;
            battle_game.getTag temp Tag.SMT_STRIKE_ACTIVE_SPAWN; # handle activating spawners
            if gt temp 0;
              #debug_log "StrikeSpawner Type: " temp;
              item.setFuseTimer 0;
              battle_game.setTag Tag.SMT_STRIKE_ACTIVE_SPAWN 0; # disable active strike
            end;
          end;

          return;

      - new: SMTS_strike_use_ammo # Handles consuming ammo charges when strike is called
        offset: 94
        code: |
          var int ammoType;
          var int temp;

          if neq side FACTION_HOSTILE; # only trigger on enemy turns
            return;
          end;
          battle_game.getTag ammoType Tag.SMT_STRIKE_AMMO_USED;
          if eq ammoType 0; # check if ammo has been used
            return;
          end;

          item.getTag temp Tag.BOMBARD_AMMO_ITEM; # check if item matches ammo type used
          if eq ammoType temp;
            #debug_log "StrikeAmmo Type: " ammoType temp;
            item.setFuseEnabled 1;
            item.setFuseTimer 0;
            battle_game.setTag Tag.SMT_STRIKE_AMMO_USED 0;
            if eq ammoType 1; # Orbital Strike
              battle_game.getTag temp Tag.SMT_STRIKE_ORBITAL_AMMO;
              sub temp 1;
              battle_game.setTag Tag.SMT_STRIKE_ORBITAL_AMMO temp;
            else eq ammoType 2; # CAS Bolter
              battle_game.getTag temp Tag.SMT_STRIKE_LIGHTNING_AMMO;
              sub temp 1;
              battle_game.setTag Tag.SMT_STRIKE_LIGHTNING_AMMO temp;
            else eq ammoType 3; # CAS Rockets
              battle_game.getTag temp Tag.SMT_STRIKE_LIGHTNING_AMMO;
              sub temp 1;
              battle_game.setTag Tag.SMT_STRIKE_LIGHTNING_AMMO temp;
            else eq ammoType 4; # CAS Napalm
              battle_game.getTag temp Tag.SMT_STRIKE_LIGHTNING_AMMO;
              sub temp 1;
              battle_game.setTag Tag.SMT_STRIKE_LIGHTNING_AMMO temp;
            else eq ammoType 5; # Stormtalon
              battle_game.getTag temp Tag.SMT_STRIKE_STORM_AMMO;
              sub temp 1;
              battle_game.setTag Tag.SMT_STRIKE_STORM_AMMO temp;
            else eq ammoType 6; # Orbital Lance
              battle_game.getTag temp Tag.SMT_STRIKE_LANCE_AMMO;
              sub temp 1;
              battle_game.setTag Tag.SMT_STRIKE_LANCE_AMMO temp;
            else eq ammoType 7; # Whirlwind
              battle_game.getTag temp Tag.SMT_STRIKE_WHIRL_AMMO;
              sub temp 1;
              battle_game.setTag Tag.SMT_STRIKE_WHIRL_AMMO temp;
            else eq ammoType 8; # Marines
              battle_game.getTag temp Tag.SMT_STRIKE_WHIRL_AMMO;
              sub temp 1;
              battle_game.setTag Tag.SMT_STRIKE_WHIRL_AMMO temp;
            else eq ammoType 9; # Scions
              battle_game.getTag temp Tag.SMT_STRIKE_WHIRL_AMMO;
              sub temp 1;
              battle_game.setTag Tag.SMT_STRIKE_WHIRL_AMMO temp;
            end;
          end;
          return;

    createUnit:
      - new: SMTS_strike_targeter_spawn # Decides which strike targeter should be spawned
        offset: 1
        code: |
          var ptr RuleUnit strikeUnit;
          var int strikeType;
          var int temp;

          unit.getTag temp Tag.BOMBARD_DUMMY;
          if le temp 0; # is unit a blank designator?
            return;
          end;

          battle_game.getTag strikeType Tag.SMT_STRIKE_ACTIVE;
          #debug_log "StrikeTransform Ping: " strikeType;
          if eq strikeType 1; # Orbital Strike
            rules.getRuleUnit strikeUnit "STR_ORBITAL_STRIKE_TARGETER";
          else eq strikeType 2; # CAS Bolter
            rules.getRuleUnit strikeUnit "STR_CAS_BOLTER_TARGETER";
          else eq strikeType 3; # CAS Rockets
            rules.getRuleUnit strikeUnit "STR_CAS_ROCKET_TARGETER";
          else eq strikeType 4; # CAS Napalm
            rules.getRuleUnit strikeUnit "STR_CAS_NAPALM_TARGETER";
          else eq strikeType 5; # Stormtalon
            rules.getRuleUnit strikeUnit "STR_STORMTALON_TARGETER";
          else eq strikeType 6; # Orbital Lance
            rules.getRuleUnit strikeUnit "STR_ORBITAL_LANCE_TARGETER";
          else eq strikeType 7; # Whirlwind
            rules.getRuleUnit strikeUnit "STR_WHIRLWIND_TARGETER";
          else eq strikeType 8; # Marines
            rules.getRuleUnit strikeUnit "STR_MARINE_CALLIN_TARGETER";
          else eq strikeType 9; # Scions
            rules.getRuleUnit strikeUnit "STR_SCION_CALLIN_TARGETER";
          else; #emergency fallback
            rules.getRuleUnit strikeUnit "STR_CAS_BOLTER_TARGETER";
            #debug_log "StrikeSpawner ERROR Type: " strikeType;
          end;



          #debug_log "StrikeTransform Transform: " strikeType strikeUnit;
          unit.setSpawnUnit strikeUnit;
          unit.setSpawnUnitFaction FACTION_PLAYER;
          unit.setSpawnUnitInstantRespawn 1;
          battle_game.setTag Tag.SMT_STRIKE_ACTIVE 0;
          battle_game.flashLongMessage "STR_STRIKE_ARRIVED"; # 'Targeting Designator available'
          return;

      - new: SMTS_strike_targeter_init # Handles the spawning of new strike targeter units
        offset: 99
        code: |
          var int temp;

          unit.getTag temp Tag.BOMBARD_TARGETER;
          if le temp 0;
            return;
          end;

          unit.getTimeUnitsMax temp;
          unit.setTimeUnits temp; # make sure it's not affected by any new unit TU drain scripts
          unit.setMana 1; # prevent firing weapons
          return;

    newTurnUnit:
      - new: SMTS_strike_spawner_killswitch # kills target designators once the turn ends
        offset: 95
        code: |
          var int strikeType;
          var int temp;

          if neq side FACTION_HOSTILE; # only trigger on enemy turns
            return;
          end;
          unit.getTag temp Tag.BOMBARD_TARGETER;
          if le temp 0;
            return;
          end;

          #debug_log "StrikeTargeterKill " temp;
          unit.setHealthWithOverkill -200;
          return;




