extended:
  tagsFile: Ruleset/Scripts/SMT_tags.rul

  scripts:
    skillUseUnit:
      - new: SMTS_command_activate      #*** Script that handles the activation of Marine Captain commands - 1.0 ***
        offset: 1.0
        code: |
          var int cmdNew;       # incoming new command
          var int cmdType;      # previous command
          var int cmdTurn;      # command active turn
          var int cmdPoints;    # number of command points
          var int cmdCount;     # number of available commands
          var int currentTurn;  # current turn

          skill.getTag cmdNew Tag.SKILL_SMT_COMMAND;
          if eq cmdNew 0;
            return;
          end;

          set spend_tu 0;

          battle_game.getTurn currentTurn;
          battle_game.getTag cmdType Tag.SMT_COMMAND_TYPE;
          battle_game.getTag cmdTurn Tag.SMT_COMMAND_TURN;
          battle_game.getTag cmdPoints Tag.SMT_COMMAND_POINTS;
          set cmdCount cmdPoints;
          div cmdCount 150; # 150 points per command

          if and eq currentTurn cmdTurn neq cmdType 0; # if a command is already active
            if eq cmdType 1;
              battle_game.flashLongMessage "STR_SCRIPT_CMD_ARMOR" cmdPoints cmdCount;
              return;
            else eq cmdType 2;
              battle_game.flashLongMessage "STR_SCRIPT_CMD_FIRE" cmdPoints cmdCount;
              return;
            else eq cmdType 3;
              battle_game.flashLongMessage "STR_SCRIPT_CMD_MELEE" cmdPoints cmdCount;
              return;
            end;
          end;

          if or eq cmdNew -1 le cmdCount 0; # if checking command count or not enough command points
            battle_game.flashLongMessage "STR_SCRIPT_CMD_NONE" cmdPoints cmdCount;
            return;
          end;

          battle_game.setTag Tag.SMT_COMMAND_TYPE cmdNew; # if all checks passed, activate new command
          battle_game.setTag Tag.SMT_COMMAND_TURN currentTurn;
          sub cmdPoints 150;
          battle_game.setTag Tag.SMT_COMMAND_POINTS cmdPoints;
          sub cmdCount 1;
          if eq cmdNew 1;
            battle_game.flashLongMessage "STR_SCRIPT_CMD_ARMOR" cmdPoints cmdCount;
          else eq cmdNew 2;
            battle_game.flashLongMessage "STR_SCRIPT_CMD_FIRE" cmdPoints cmdCount;
          else eq cmdNew 3;
            battle_game.flashLongMessage "STR_SCRIPT_CMD_MELEE" cmdPoints cmdCount;
          end;

          return;


    hitUnit:
      - new: SMTS_cmd_armor_hitunit     #*** Armor of Contempt damage reduction - 1.0 ***
        offset: 1.0
        code: |
          var int temp;
          var int temp2;

          if eq damaging_type 0; # ignore support type damage
            return power part side;
          end;

          unit.getTag temp Tag.UNIT_TYPE_ASTARTES; # only affects Space Marines
          if le temp 0;
            return power part side;
          end;

          battle_game.getTag temp Tag.SMT_COMMAND_TYPE; # only if current command is Armor of Contempt
          if neq temp 1;
            return power part side;
          end;

          battle_game.getTurn temp; # only if command is still active
          battle_game.getTag temp2 Tag.SMT_COMMAND_TURN;
          if neq temp temp2;
            return power part side;
          end;

          #debug_log "AoC Hit Pre " power side;
          muldiv power 4 5; # reduce power to 80%

          set temp2 0; # compare armor sides and pick most armored side
          unit.getArmor temp SIDE_FRONT;
          if gt temp temp2;
            set side SIDE_FRONT;
            set temp2 temp;
          end;

          unit.getArmor temp SIDE_LEFT;
          if gt temp temp2;
            set side SIDE_LEFT;
            set temp2 temp;
          end;

          unit.getArmor temp SIDE_RIGHT;
          if gt temp temp2;
            set side SIDE_RIGHT;
            set temp2 temp;
          end;

          unit.getArmor temp SIDE_REAR;
          if gt temp temp2;
            set side SIDE_REAR;
            set temp2 temp;
          end;

          unit.getArmor temp SIDE_UNDER;
          if gt temp temp2;
            set side SIDE_UNDER;
            set temp2 temp;
          end;
          #debug_log "AoC Hit Post " power side;

          return power part side;

      - new: SMTS_cmd_firing_hitunit    #*** Storm of Fire damage boost - 40.0 ***
        offset: 40.0
        code: |
          var int temp;
          var int temp2;

          if eq damaging_type 0; # ignore support type damage
            return power part side;
          end;

          attacker.getTag temp Tag.UNIT_TYPE_ASTARTES; # only affects Space Marines
          if le temp 0;
            return power part side;
          end;

          attacker.getFaction temp; # ignore friendly fire
          unit.getFaction temp2;
          if eq temp temp2;
            return power part side;
          end;

          battle_game.getTag temp Tag.SMT_COMMAND_TYPE; # only if current command is Storm of Fire
          if neq temp 2;
            return power part side;
          end;

          battle_game.getTurn temp; # only if command is still active
          battle_game.getTag temp2 Tag.SMT_COMMAND_TURN;
          if neq temp temp2;
            return power part side;
          end;

          #debug_log "SoF Hit " power battle_action;
          if and ge battle_action battle_action_autoshoot le battle_action battle_action_aimshoot; # only if action is auto, snap or aimed shot (7/8/9)
            unit.getArmor temp side;
            #debug_log "SoF Hit " power temp;
            if gt temp power;
              muldiv power 6 5; # +20% power if armor > power
              limit_upper power temp; # cap power boost at armor value
            end;
          end;

          #debug_log "SoF End " power;
          return power part side;

    damageUnit:
      - new: SMTS_cmd_dmgunit    #*** AoC Armor Protection, SoF Armor Destruction, RA TU Recovery ***
        offset: 2.0
        code: |
          var int armorMult;
          var int temp;
          var int temp2;

          if eq damaging_type 0; # ignore support type damage
            return;
          end;

          battle_game.getTurn temp; # only if command is active
          battle_game.getTag temp2 Tag.SMT_COMMAND_TURN;
          if neq temp temp2;
            #debug_log "Command Fail - No Command Active " temp temp2;
            return;
          end;

          battle_game.getTag temp Tag.SMT_COMMAND_TYPE; # check current command

          if eq temp 1; ## Armor of Contempt
            unit.getTag temp Tag.UNIT_TYPE_ASTARTES;
            #debug_log "AoC Ping" temp to_armor;
            if gt temp 0;
              limit_upper to_armor 2; # negate most armor destruction
              #debug_log "AoC Trigger" temp to_armor;
            end;

          else eq temp 2; ## Storm of Fire
            attacker.getTag temp Tag.UNIT_TYPE_ASTARTES;
            #debug_log "SoF Ping 1 " orig_power currPower to_armor;
            if and gt temp 0 neq orig_power currPower; # if attack was reduced by armor & attacker is astartes
              attacker.getFaction temp;
              unit.getFaction temp2;
              #debug_log "SoF Ping 2 " temp temp2;
              if neq temp temp2; # ignore friendly fire
                #debug_log "SoF Ping 3 " battle_action battle_action_autoshoot battle_action_aimshoot;
                if and ge battle_action battle_action_autoshoot le battle_action battle_action_aimshoot; # only if action is auto, snap or aimed shot (7/8/9)
                  set armorMult orig_power;
                  set temp currPower;
                  unit.getArmor temp2 side;
                  #debug_log "SoF Dmg Calc " orig_power currPower temp2;
                  sub armorMult temp; # work out base weapon armor penetration
                  muldiv armorMult 100 temp2;
                  add armorMult 100;
                  limit_lower armorMult 100;
                  add to_armor 3;
                  muldiv to_armor armorMult 100; # multiply to_armor damage by armor reduction
                  #debug_log "SoF Trigger " to_armor armorMult;
                end;
              end;
            end;

          else eq temp 3; ## Relentless Assault
            attacker.getFaction temp;
            debug_log "RA Ping1 " battle_action battle_action_hit temp FACTION_PLAYER;
            if and eq temp FACTION_PLAYER eq battle_action battle_action_hit; # melee hits only
              attacker.getTag temp Tag.UNIT_TYPE_ASTARTES; # only affects Space Marines
              attacker.getTag temp2 Tag.SMT_RAMPAGE_COUNT; # can only trigger up to 6 times
              debug_log "RA Ping2 " temp temp2;
              if and gt temp 0 lt temp2 6;
                unit.getHealth temp;
                debug_log "RA Ping3 " temp to_health;
                if ge to_health temp; # only killing blows
                  add temp2 1;
                  attacker.setTag Tag.SMT_RAMPAGE_COUNT temp2;
                  attacker.getTimeUnitsMax temp;
                  attacker.getTimeUnits temp2;
                  debug_log "RA Final1 " temp temp2;
                  muldiv temp 33 100; # up to 33% of max TUs refunded
                  add temp2 temp;
                  attacker.getTimeUnitsMax temp;
                  limit_upper temp2 temp;
                  attacker.setTimeUnits temp2;
                  debug_log "RA Final2 " temp temp2;
                end;
              end;
            end;
          end;

          return;

    reactionUnitAction:
      - new: SMTS_cmd_melee_reactions    #*** Relentless Assault reactions negation - 1.0 ***
        offset: 1.0
        code: |
          var int temp;
          var int temp2;

          action_target.getFaction temp; # only affects player units
          if neq temp FACTION_PLAYER;
            return reaction_chance;
          end;

          action_target.getTag temp Tag.UNIT_TYPE_ASTARTES; # only affects Space Marines
          if le temp 0;
            return reaction_chance;
          end;

          battle_game.getTag temp Tag.SMT_COMMAND_TYPE; # only if current command is Relentless Assault
          if neq temp 3;
            return reaction_chance;
          end;

          battle_game.getTurn temp; # only if command is still active
          battle_game.getTag temp2 Tag.SMT_COMMAND_TURN;
          if neq temp temp2;
            return reaction_chance;
          end;

          if and ge battle_action battle_action_autoshoot le battle_action battle_action_aimshoot; # only if action is not auto, snap or aimed shot (7/8/9)
            return reaction_chance;
          end;

          return 0;

    tryMeleeAttackItem:
      - new: SMTS_cmd_melee_accuracy    #*** Relentless Assault accuracy bonus - 10.0 ***
        offset: 10
        code: |
          var int temp;
          var int temp2;

          attacker.getFaction temp; # only affects player units
          if neq temp FACTION_PLAYER;
            return melee_attack_success;
          end;

          attacker.getTag temp Tag.UNIT_TYPE_ASTARTES; # only affects Space Marines
          if le temp 0;
            return melee_attack_success;
          end;

          battle_game.getTag temp Tag.SMT_COMMAND_TYPE; # only if current command is Relentless Assault
          if neq temp 3;
            return melee_attack_success;
          end;

          battle_game.getTurn temp; # only if command is still active
          battle_game.getTag temp2 Tag.SMT_COMMAND_TURN;
          if neq temp temp2;
            return melee_attack_success;
          end;

          set temp attack_strength;
          muldiv temp 6 5; # +20%
          sub temp attack_strength;
          set temp2 melee_attack_success;
          add temp2 temp;

          return temp2;

    newTurnUnit:
      - new: SMTS_rampage_reset         #*** Reset Rampage counter ***
        offset: 10
        code: |

          unit.setTag Tag.SMT_RAMPAGE_COUNT 0;
          return;



