extended:
  tagsFile: Ruleset/Scripts/SMT_tags.rul

  scripts:
    damageUnit:
      - new: SMTS_death_triggers
        offset: 95
        code: |
          var int pointVal;
          var int temp;
          var int temp2;

          set to_mana 0; # catch for corruption to stop it interfering with munitions

          unit.getHealth temp;
          if lt to_health temp; # only killing blows
            unit.getTag temp2 Tag.SMT_LOWEST_HEALTH;
            #debug_log "Death Trigger Fail" to_health temp temp2;
            sub temp to_health;
            if or lt temp temp2 eq temp2 0;
             unit.setTag Tag.SMT_LOWEST_HEALTH temp; # adjust lowest health reached for regen
            end;
            return;
          end;
          #debug_log "Death Trigger" to_health temp unit;

          begin; ### Turret Deaths
            unit.getTag temp Tag.SMT_RAZOR_HBOLTER_TURRET;   # Razorback Heavy Bolter
            if eq temp 1;
              battle_game.getTag temp Tag.SMT_RAZOR_HBOLTER_DEATHS;
              add temp 1;
              battle_game.setTag Tag.SMT_RAZOR_HBOLTER_DEATHS temp;
            end;
            unit.getTag temp Tag.SMT_RAZOR_LAS_TURRET;       # Razorback Lascannon
            if eq temp 1;
              battle_game.getTag temp Tag.SMT_RAZOR_LAS_DEATHS;
              add temp 1;
              battle_game.setTag Tag.SMT_RAZOR_LAS_DEATHS temp;
            end;
            unit.getTag temp Tag.SMT_RAZOR_HFLAME_TURRET;    # Razorback HeavyFlamer
            if eq temp 1;
              battle_game.getTag temp Tag.SMT_RAZOR_HFLAME_DEATHS;
              add temp 1;
              battle_game.setTag Tag.SMT_RAZOR_HFLAME_DEATHS temp;
            end;
          end;

          begin; ### Expert Deaths
            var ptr RuleSoldier soldierRuleset;

            unit.getFaction temp; # player units only
            if eq temp FACTION_PLAYER;
              unit.getRuleSoldier soldierRuleset;
              soldierRuleset.getTag temp Tag.SOLDIER_IS_PSISKILL_TEACHER; # Devotion Teacher
              if gt temp 0;
                battle_game.getTag temp2 Tag.SMT_DEVOTION_TEACHER_TOTAL;
                sub temp2 temp;
                battle_game.setTag Tag.SMT_DEVOTION_TEACHER_TOTAL temp2;
                battle_game.getTag temp Tag.SMT_DEVOTION_TEACHER_PEAK;
                limit_upper temp temp2;
                battle_game.setTag Tag.SMT_DEVOTION_TEACHER_PEAK temp;
              end;
              soldierRuleset.getTag temp Tag.SOLDIER_WOUNDTIME_RECOVERY_GLOBAL; # Medical Expert
              if gt temp 0;
                battle_game.getTag temp2 Tag.SMT_FAST_RECOVERY_TOTAL;
                sub temp2 temp;
                battle_game.setTag Tag.SMT_FAST_RECOVERY_TOTAL temp2;
                battle_game.getTag temp Tag.SMT_FAST_RECOVERY_PEAK;
                limit_upper temp temp2;
                battle_game.setTag Tag.SMT_FAST_RECOVERY_PEAK temp;
              end;
            end;
          end;

          begin; ### SM Captain Points
            unit.getFaction temp; # enemy kills only
            if eq temp FACTION_HOSTILE;
              ## Marine Command Points
              unit.getHealthMax pointVal;
              loop var i 5; #cycle through the armor sides
                unit.getArmorMax temp i;
                add pointVal temp;
                #debug_log "Cmd Points Armor " i temp pointVal;
              end;
              set temp 100;
              unit.getTag temp2 Tag.ARMOR_ENERGY_SHIELD_DECAY;
              if gt temp2 0;
                div temp temp2;
                unit.getTag temp2 Tag.ARMOR_ENERGY_SHIELD_HP_PER_TURN;
                mul temp temp2;
                add pointVal temp;
              end;

              #debug_log "Cmd Points Bonus " pointVal;
              div pointVal 18; # average of hp + shields & armor sides /3

              battle_game.getTag temp Tag.SMT_COMMAND_POINTS;
              #debug_log "Cmd Points Final " pointVal temp;
              add pointVal temp;
              battle_game.setTag Tag.SMT_COMMAND_POINTS pointVal;
            end;
          end;


          return;

      - delete: ROSIGMA_dU_turret_reload # integrated into above
      - delete: ROSIGMA_dU_alpha_infiltration

    hitUnit:
      - override: ROSIGMA_hU_remove_flight # remove high power attacks disabling flight
        offset: 50
        code: |
          var int flying;
          var int flighttime;
          var int removesflight;
          var int turn;
          var int maxCooldown;
          var int cooldownTime;
          var int dodged;
          var ptr BattleItem ammoptr;

          unit.getTag dodged Tag.DODGED;
          if eq dodged 1;
            unit.setTag Tag.DODGED 0;
            return power part side;
          end;

          weapon_item.getAmmoItem ammoptr;
          ammoptr.getTag removesflight Tag.RemovesFlight;
          if eq removesflight 1;
            unit.getTag flighttime Tag.FlightTime;
            if gt flighttime 0;
                battle_game.getTurn turn;
                unit.setTag Tag.FlightTime turn;
                unit.getTag maxCooldown Tag.MaxCoolDown;
                set cooldownTime turn;
                add cooldownTime maxCooldown;
                unit.setTag Tag.CooldownTime cooldownTime;
            end;
            unit.setMovementType 0;
          end;
          return power part side;



