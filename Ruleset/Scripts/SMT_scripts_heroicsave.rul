soldiers:
  - type: STR_SOLDIER
    tags:
      SMT_HEROICSAVE_CHANCE: 30 # success chance is (((Current HP% * 2) + (Devotion/2)) * saveChance/100) / # of Save checks made
      SMT_HEROICSAVE_HP: 30

  - type: STR_SOLDIER_NEOPHYTE
    tags:
      SMT_HEROICSAVE_CHANCE: 5
      SMT_HEROICSAVE_HP: 10

  - type: STR_SOLDIER_TERMINATOR
    tags:
      SMT_HEROICSAVE_CHANCE: 65
      SMT_HEROICSAVE_HP: 45 # was 60 - now that wound protection is in this can stand to be lower

  - type: STR_SOLDIER_CHAPLAIN
    tags:
      SMT_HEROICSAVE_CHANCE: 65
      SMT_HEROICSAVE_HP: 45

  - type: STR_SOLDIER_LIBRARIAN
    tags:
      SMT_HEROICSAVE_CHANCE: 30
      SMT_HEROICSAVE_HP: 30

  - type: STR_SOLDIER_LIBRARIAN_TERM
    tags:
      SMT_HEROICSAVE_CHANCE: 65
      SMT_HEROICSAVE_HP: 45

  - type: STR_FALLEN
    tags:
      SMT_HEROICSAVE_CHANCE: 0 # dreadnoughts can't get stunned, heroic save leaves them standing
      SMT_HEROICSAVE_HP: 0

extended:
  tags:
    BattleUnit:
      SMT_HEROICSAVE_TRIGGERS: int #number of times a unit has made a heroic save
      SMT_RECOVERY_TIME: int #store unit penalties to wound recovery time
      CURRENT_INFECTION_DAMAGE: int #rosigma - current amount of infection the unit has
      CURRENT_INFECTION_TYPE: int #rosigma - type of infection the unit has
    RuleSoldier:
      SMT_HEROICSAVE_CHANCE: int #Modifier to chance to resist fatal damage
      SMT_HEROICSAVE_HP: int #% of currenthp left after heroic save triggers

  scripts:
    damageUnit:
      #*** Script for protecting units from fatal damage ***
      - new: SMTS_heroic_save
        offset: 22.1 # run after corruption damage is applied but before the unit gets instakilled for having too much corruption
        code: |
          var ptr RuleSoldier unitSoldier;
          var int saveChance;
          var int unitSaveMod;
          var int maxHealth;
          var int currentHealth;
          var int saveHealth;
          var int saveCount;
          var int woundsTotal;
          var int turnSide;
          var int temp;
          var int temp2;

          unit.getRuleSoldier unitSoldier;
          unitSoldier.getTag unitSaveMod Tag.SMT_HEROICSAVE_CHANCE;
          unitSoldier.getTag saveHealth Tag.SMT_HEROICSAVE_HP;
          if or eq unitSaveMod 0 eq saveHealth 0; # skip if unit doesn't have heroic save
            #debug_log "HeroSave aborted - Unit doesn't have HS " unitSaveMod saveHealth;
            return;
          end;

          ### Work out if the unit needs saving
          unit.getHealth currentHealth;
          battle_game.getTurnSide turnSide;
          if eq turnSide 0;
            if gt currentHealth to_health; # on player turn only consider direct damage
              return; # skip if damage isn't fatal
            end;
          else;
            unit.getFatalwoundsTotal woundsTotal;   # existing wounds
            add woundsTotal to_wound;               # incoming wounds
            set temp woundsTotal;
            add temp to_health;
            if gt currentHealth temp; # on enemy turn consider wounds as part of damage
              return; # skip if damage + wounds isn't fatal
            end;
          end;

          ### Handle chance to be protected by Heroic Save
          debug_log "HeroSave ping (health|damage|baseChance) - " currentHealth to_health unitSaveMod;
          unit.getHealthMax maxHealth;
          set saveChance currentHealth;
          if lt maxHealth 100;
            muldiv saveChance 100 maxHealth; #get hp as % if maxHP is less than 100
          end;
          mul saveChance 2; #double value from hp
          unit.Stats.getPsiSkill temp;
          unit.getTag temp2 Tag.SOLDIER_IS_FANATIC;
          if eq temp2 0;
            div temp 2; # divide bonus from devotion by 2 if unit isn't blessed
          end;
          #debug_log "HeroSave Devotion Bonus - " temp temp2;
          add saveChance temp; #add devotion to base
          muldiv saveChance unitSaveMod 100; # reduce by soldier save % chance
          unit.getTag saveCount Tag.SMT_HEROICSAVE_TRIGGERS;
          add saveCount 1;
          limit_lower saveCount 1; #sanity check to make sure there's no /0 nonsense
          div saveChance saveCount; #divide chance by number of successful saves made by this unit +1
          battle_game.randomRange temp 0 100; 
          debug_log "HeroSave randomRoll (chance|roll) - " saveChance temp;
          if lt saveChance temp; # fail if random roll 0-100 > save chance
            return;
          end;

          ### Handle protecting the unit on successful Save
          set to_transform 0; # prevent any potential transform
          set temp2 to_health;
          muldiv saveHealth currentHealth 100; # convert % saveHealth into actual health value
          limit_lower saveHealth 5; # make sure remaining health is at least 5
          set temp currentHealth;
          sub temp saveHealth;
          set to_health temp; # only damage unit up to the saveHealth limit
          sub temp2 temp; # get overflow damage
          add to_stun temp2; # add overflow to stun damage
          unit.setFire 0; # extinguish fire
          set to_transform 0; # prevent any chance of transforming
          unit.getTag temp Tag.SMT_RECOVERY_TIME;
          add temp 15; # divided by unit woundRecovery modifier
          unit.setTag Tag.SMT_RECOVERY_TIME temp; # increase post-mission recovery time
          unit.setTag Tag.SMT_HEROICSAVE_TRIGGERS saveCount; # increment save counter;
          battle_game.flashMessage "STR_SCRIPT_HEROIC_SAVE"; # 'Unit endured the hit'

          ### Handle wound protection to stop saved units from dying at the start of your turn
          debug_log "HeroSave Final (currHp|tohp|tostun|wound|saveHp|turn)- " currentHealth to_health to_stun temp saveHealth temp2;
          if and ge woundsTotal saveHealth neq turnSide 0;
            add temp 5;
            unit.setHealth temp; # set health to current wounds +5 - corruption damage happens at the start of enemy turn, we don't need to account for it
            add to_stun to_health; # convert remaining incoming health damage to stun
            limit_lower to_stun temp; # make sure to stun the unit in the case that they have excessive wounds and would die, but haven't taken enough raw damage to get stunned
            set to_health 0; # negate incoming damage
            unit.getHealth currentHealth;
            debug_log "HeroSave Woundsave " temp currentHealth to_stun;
          end;

          return;

    damageSpecialUnit:
      #*** Script for protecting units from instant-kill zombifying effects ***
      - new: SMTS_heroic_save_transform
        offset: 2
        code: |
          var ptr RuleSoldier unitSoldier;
          var int saveChance;
          var int unitSaveMod;
          var int maxHealth;
          var int saveHealth;
          var int saveCount;
          var int temp;
          var int temp2;

          if eq transform_chance 0; # skip if the attack can't transform the target
            return;
          end;
          unit.getRuleSoldier unitSoldier;
          unitSoldier.getTag unitSaveMod Tag.SMT_HEROICSAVE_CHANCE;
          unitSoldier.getTag saveHealth Tag.SMT_HEROICSAVE_HP;
          if or eq unitSaveMod 0 eq saveHealth 0; # skip if unit doesn't have heroic save
            #debug_log "HeroSaveZombie aborted - Unit doesn't have HS " unitSaveMod saveHealth;
            return;
          end;

          #debug_log "HeroSaveZombie ping " unitSaveMod saveHealth transform_chance;
          unit.getHealthMax maxHealth;
          unit.getHealth saveChance;
          if lt maxHealth 100;
            muldiv saveChance 100 maxHealth; #get hp as % if maxHP is less than 100
          end;
          unit.Stats.getPsiSkill temp;
          unit.getTag temp2 Tag.SOLDIER_IS_FANATIC;
          if eq temp2 1;
            mul temp 3; # devotion effect is tripled if blessed by Chaplain
          end;
          add saveChance temp; #add devotion to base
          muldiv saveChance unitSaveMod 100; # reduce by soldier save % chance
          unit.getTag saveCount Tag.SMT_HEROICSAVE_TRIGGERS; # Reduced by number of heroic saves made
          add saveCount 1;
          limit_lower saveCount 1; #sanity check to make sure there's no /0 nonsense
          div saveChance saveCount; #divide chance by number of heroic saves made by this unit +1
          battle_game.randomRange temp 0 100; 
          #debug_log "HeroSave randomRoll - " saveChance temp;
          if lt saveChance temp; # fail if random roll 0-100 > save chance
            #debug_log "HeroSave failed - saveChance too low" saveChance temp;
            return;
          end;

          set transform_chance 0; # negate the transformation chance
          # We don't increase wound time or increase the saveCount here because this will trigger even on transformation attempts that would fail
          # Every shot from nurgle would trigger this, even the ones with 1% chance to transform

          return;
