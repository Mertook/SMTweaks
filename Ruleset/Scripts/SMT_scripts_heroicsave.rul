extended:
  tagsFile: Ruleset/Scripts/SMT_tags.rul

  scripts:
    newTurnUnit:
      - new: SMTS_heroic_save_startinghealth
        offset: 90.0
        code: |
          var int temp;
          var int endTurn;

          if neq side 0; # only run on the players turn
            return;
          end;
          unit.getHealth temp;
          if gt temp 0; # only living units
            unit.setTag Tag.UNIT_STARTOFTURN_HEALTH temp;
          end;

          return;

    damageUnit:
      #*** Script for protecting units from fatal damage ***
      - new: SMTS_heroic_save_protect
        offset: 22.1 # run after corruption is applied but before the unit gets instakilled for having too much corruption
        code: |
          var ptr RuleSoldier unitSoldier;
          var int saveChance;
          var int unitSaveMod;
          var int maxHealth;
          var int currentHealth;
          var int saveHealth;
          var int saveCount;
          var int woundsTotal;
          var int turnSide;
          var int temp;
          var int temp2;

          unit.getRuleSoldier unitSoldier;
          unitSoldier.getTag unitSaveMod Tag.SMT_HEROICSAVE_CHANCE;
          unitSoldier.getTag saveHealth Tag.SMT_HEROICSAVE_HP;
          if or eq unitSaveMod 0 eq saveHealth 0; # skip if unit doesn't have heroic save
            #debug_log "HeroSave aborted - Unit doesn't have HS " unitSaveMod saveHealth;
            return;
          end;

          ### Work out if the unit needs saving
          unit.getHealth currentHealth;
          battle_game.getTurnSide turnSide;
          unit.getFaction temp;
          if eq turnSide temp;
            if gt currentHealth to_health; # on player turn only consider direct damage
              return; # skip if damage isn't fatal
            end;
          else;
            unit.getFatalwoundsTotal woundsTotal;   # existing wounds
            add woundsTotal to_wound;               # incoming wounds
            set temp woundsTotal;
            add temp to_health;
            if gt currentHealth temp; # on enemy turn consider wounds as part of damage
              return; # skip if damage + wounds isn't fatal
            end;
          end;

          ### Handle chance to be protected by Heroic Save
          unit.getHealthMax maxHealth;
          unit.getTag saveChance Tag.UNIT_STARTOFTURN_HEALTH;
          limit_lower saveChance currentHealth;
          #debug_log "HeroSave ping (turn|health|starthealth|damage|baseChance) - " turnSide currentHealth saveChance to_health unitSaveMod;
          muldiv saveChance 100 maxHealth; #get hp as % of maxHP
          mul saveChance 2; #double value from hp
          unit.getTag temp2 Tag.SOLDIER_IS_FANATIC;
          if eq temp2 1; # if unit is blessed add devotion to save chance
            unit.Stats.getPsiSkill temp;
            div temp 3; # 1/3 devotion as bonus
            add saveChance temp;
          end;
          #debug_log "HeroSave Devotion Bonus - " temp temp2;
          muldiv saveChance unitSaveMod 100; # reduce by soldier save % chance
          unit.getTag saveCount Tag.SMT_HEROICSAVE_TRIGGERS;
          add saveCount 1;
          limit_lower saveCount 1; #sanity check to make sure there's no /0 nonsense
          div saveChance saveCount;
          div saveChance saveCount; #divide chance by number of successful saves made by this unit +1, twice
          battle_game.randomRange temp 0 100; 
          #debug_log "HeroSave randomRoll (chance|roll) - " saveChance temp;
          if lt saveChance temp; # fail if random roll 0-100 > save chance
            return;
          end;

          ### Handle protecting the unit on successful Save
          set to_transform 0; # prevent any potential transform
          set temp2 to_health;
          muldiv saveHealth currentHealth 100; # convert % saveHealth into actual health value
          limit_lower saveHealth 10; # make sure remaining health is at least 10
          set temp currentHealth;
          sub temp saveHealth;
          set to_health temp; # only damage unit up to the saveHealth limit
          sub temp2 temp; # get overflow damage
          mul temp2 3; # multiply overflow by 3
          set temp maxHealth;
          mul temp 2;
          limit_lower temp2 temp; # minimum 2x units max health as stun
          add to_stun temp2; # add overflow to stun damage
          unit.setFire 0; # extinguish fire
          set to_transform 0; # prevent any chance of transforming
          unit.getTag temp Tag.SMT_RECOVERY_PENALTY;
          add temp 40; # divided by unit woundRecovery modifier
          unit.setTag Tag.SMT_RECOVERY_PENALTY temp; # increase post-mission recovery time
          unit.setTag Tag.SMT_HEROICSAVE_TRIGGERS saveCount; # increment save counter;
          battle_game.flashLongMessage "STR_SCRIPT_HEROIC_SAVE"; # 'Unit endured the hit'

          ### Handle wound protection to stop saved units from dying at the start of your turn
          #debug_log "HeroSave Final (currHp|tohp|tostun|wound|saveHp|turn)- " currentHealth to_health to_stun woundsTotal saveHealth temp2;
          if and ge woundsTotal saveHealth neq turnSide FACTION_PLAYER;
            add woundsTotal 15;
            unit.setHealth woundsTotal; # set health to current wounds +15 - corruption damage happens at the start of enemy turn, we don't need to account for it
            add to_stun to_health; # convert remaining incoming health damage to stun
            set to_health 0; # negate incoming damage
            #debug_log "HeroSave Woundsave " woundsTotal to_stun;
          end;

          return;

    damageSpecialUnit:
      #*** Script for protecting units from instant-kill zombifying effects ***
      - new: SMTS_heroic_save_transform
        offset: 2
        code: |
          var ptr RuleSoldier unitSoldier;
          var int saveChance;
          var int unitSaveMod;
          var int maxHealth;
          var int saveHealth;
          var int temp;
          var int temp2;

          if eq transform_chance 0; # skip if the attack can't transform the target
            return;
          end;
          unit.getRuleSoldier unitSoldier;
          unitSoldier.getTag unitSaveMod Tag.SMT_HEROICSAVE_CHANCE;
          unitSoldier.getTag saveHealth Tag.SMT_HEROICSAVE_HP;
          if or eq unitSaveMod 0 eq saveHealth 0; # skip if unit doesn't have heroic save
            #debug_log "HeroSaveZombie aborted - Unit doesn't have HS " unitSaveMod saveHealth;
            return;
          end;

          #debug_log "HeroSaveZombie ping " unitSaveMod saveHealth transform_chance;
          unit.getHealthMax maxHealth;
          unit.getHealth saveChance;
          if lt maxHealth 100;
            muldiv saveChance 100 maxHealth; #get hp as % if maxHP is less than 100
          end;
          unit.Stats.getPsiSkill temp;
          unit.getTag temp2 Tag.SOLDIER_IS_FANATIC;
          if eq temp2 1;
            mul temp 3; # devotion effect is tripled if blessed by Chaplain
          end;
          add saveChance temp; #add devotion to base
          muldiv saveChance unitSaveMod 100; # reduce by soldier save % chance
          battle_game.randomRange temp 0 100; 
          #debug_log "HeroSave randomRoll - " saveChance temp;
          if lt saveChance temp; # fail if random roll 0-100 > save chance
            #debug_log "HeroSave failed - saveChance too low" saveChance temp;
            return;
          end;

          set transform_chance 0; # negate the transformation chance
          # We don't increase wound time or increase the saveCount here because this will trigger even on transformation attempts that would fail

          return;
