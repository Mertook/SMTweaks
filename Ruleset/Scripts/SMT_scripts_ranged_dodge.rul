## Replica of ROSIGMA script to add new armors

extended:
  tags:
    BattleUnit:
      LAST_DODGE_FRAME: int
      DODGED: int
      UNIT_COUNTER_SUCCESSFUL_DODGES: int
    RuleArmor:
      DODGE_CHANCE: int
      FLIGHT_DODGE_CHANCE: int
      ARMOR_MAX_SUCCESSFUL_DODGES: int
      ARMOR_DODGE_CHANCE_DECLINE_PER_SUCCESS: int #how much our chance to dodge decreases with each successful dodge
      ARMOR_DODGE_CHANCE_PERCENT_REDUCTION: int
      ARMOR_DODGE_CHANCE_FLAT_REDUCTION: int
    RuleItem:
      DODGE_CHANCE_FLAT_REDUCTION: int
      DODGE_CHANCE_PERCENT_REDUCTION: int

armors:
  - &STR_DODGE_ARMOR # Template
    type: STR_ASS_ARMOR_HONOR_CLAW
    tags:
      DODGE_CHANCE: 0
      FLIGHT_DODGE_CHANCE: 25
      ARMOR_MAX_SUCCESSFUL_DODGES: 2
    scripts:
      newTurnUnit: |
        var int unitFaction;

        unit.getFaction unitFaction;
        if eq side unitFaction; # don't reset on others' turns
          unit.setTag Tag.UNIT_COUNTER_SUCCESSFUL_DODGES 0;
        end;
        return;

      hitUnit: |
        var int temp;
        var int temp2;
        var int dodgeChance;
        var int flightDodgeChance;
        var ptr RuleArmor targetArmor;
        var ptr RuleArmor attackerArmor;
        var ptr RuleItem damagingItem;
        var ptr RuleDamageType damageType;
        var int unitDirection;
        var int attackerDirection;
        var int counterSuccessfulDodges;
        var int maxSuccessfulDodges;
        var int dodgeFlatReduction;
        var int dodgePercentReduction;
        var int dodgeDeclines;
        var int dodgeArmorPercentReduction;

        # don't dodge on melee and psi
        if or eq battle_action BA_HIT eq battle_action BA_PANIC eq battle_action BA_MINDCONTROL eq battle_action BA_USE;
          #debug_log "hitUnit | dodge scripts | battle_action undodgeable. Aborting:";
          return power part side;
        end;

        damaging_item.getRuleItem damagingItem;
        damagingItem.getDamageType damageType;
        damageType.getResistType temp;

        # don't dodge support skills
        # terrain artillery shell (terror city map) do damageType 0
        if or eq temp 0 eq temp 10; # Support or Impact (IG Support, non-IG drop deploy) damage type
          #debug_log "hitUnit | dodge scripts | damage type undodgeable. Aborting:" temp;
          return power part side;
        end;

        damageType.isAreaOfEffect temp;
        if gt temp 0;
          #debug_log "hitUnit | dodge scripts | Attack is an aoe and undodgeable. Aborting:";
          return power part side;
        end;

        #define defender armor values
        unit.getRuleArmor targetArmor;
        targetArmor.getTag dodgeChance Tag.DODGE_CHANCE;
        targetArmor.getTag flightDodgeChance Tag.FLIGHT_DODGE_CHANCE;
        #define attacker armor values
        attacker.getRuleArmor attackerArmor;
        attackerArmor.getTag dodgeArmorPercentReduction Tag.ARMOR_DODGE_CHANCE_PERCENT_REDUCTION;
        set temp dodgeArmorPercentReduction;
        add temp dodgeChance;
        add temp flightDodgeChance;
        if le temp 0;
          #debug_log "hitUnit | dodge scripts | no dodge or dodge mitigation chance detected. Aborting:" temp;
          return power part side;
        end;

        # don't dodge when stunned
        unit.getHealth temp;
        unit.getStun temp2;

        if ge temp2 temp;
          #debug_log "hitUnit | dodge scripts | target is stunned and cannot dodge. Aborting:";
          return power part side;
        end;

        # don't dodge when counter has reached max;
        unit.getTag counterSuccessfulDodges Tag.UNIT_COUNTER_SUCCESSFUL_DODGES;
        targetArmor.getTag maxSuccessfulDodges Tag.ARMOR_MAX_SUCCESSFUL_DODGES;
        damagingItem.getTag dodgeFlatReduction Tag.DODGE_CHANCE_FLAT_REDUCTION;
        damagingItem.getTag dodgePercentReduction Tag.DODGE_CHANCE_PERCENT_REDUCTION;

        if gt dodgeArmorPercentReduction dodgePercentReduction; #use the armor dodge mitigation if it's higher
          set dodgePercentReduction dodgeArmorPercentReduction;
        end;

        attackerArmor.getTag temp Tag.ARMOR_DODGE_CHANCE_FLAT_REDUCTION;
        if gt temp dodgeFlatReduction; #use the armor dodge mitigation if it's higher
          set dodgeFlatReduction temp;
        end;

        #debug_log "hitUnit | dodge scripts | dodgePercentReduction:" dodgePercentReduction;
        #debug_log "hitUnit | dodge scripts | dodgeFlatReduction:" dodgeFlatReduction;
        if or ge dodgeFlatReduction 100 ge dodgePercentReduction 100; #these weapons are undodgable
          #debug_log "hitUnit | dodgeFlatReduction or dodgePercentReduction 100 or greater, Aborting." dodgePercentReduction;
          return power part side;
        end;

        # assume that setting it has been forgotten
        if eq maxSuccessfulDodges 0;
          set maxSuccessfulDodges 1;
        end;

        targetArmor.getTag dodgeDeclines Tag.ARMOR_DODGE_CHANCE_DECLINE_PER_SUCCESS;
        if gt dodgeDeclines 0;
          set maxSuccessfulDodges 999; #effectively we ignore max dodges; we're limited by our declining chance of dodge success on subsequent hits instead
        end;

        if ge counterSuccessfulDodges maxSuccessfulDodges;
          #debug_log "hitUnit | dodge scripts | Max successful dodges exceeded. Aborting:" counterSuccessfulDodges;
          return power part side;
        end;

        if gt flightDodgeChance 0;
          unit.isFlying temp;
          if eq temp 1;
            set dodgeChance flightDodgeChance;
          end;
        end;

        #reduce the dodge chance by the dodgeFlatReduction amount
        sub dodgeChance dodgeFlatReduction;
        mul dodgeDeclines counterSuccessfulDodges; #reduce dodge chance by ARMOR_DODGE_CHANCE_DECLINE_PER_SUCCESS times number of successful dodges.
        sub dodgeChance dodgeDeclines;
        if le dodgeChance 0;
          #debug_log "Dodge chance reduced to 0 by dodgeFlatReduction property.";
          return power part side;
        end;

        #invert the dodgePercentReduction and multiply with the dodgeChance to get a % chance reduction
        sub dodgePercentReduction 100;
        mul dodgePercentReduction -1;
        muldiv dodgeChance dodgePercentReduction 100;

        unit.getDirection unitDirection; # {0-7}
        attacker.getDirection attackerDirection;
        add attackerDirection 4; # Offset for attacker so A+D "face the same direction"
        mod attackerDirection 8; # (7+4) % 8 = 3 # in other words limit to {0-7}
        sub unitDirection attackerDirection; # check if both face the same direction
        abs unitDirection; # range should be outside of {-1, 0, +1} (extended front) to take effect

        if or eq unitDirection 2 eq unitDirection 3; # extended side hit
          muldiv dodgeChance 2 3; # multiply chance by 66 %
        else eq unitDirection 4; # rear hit
          muldiv dodgeChance 1 3; # multiply chance by 33 %
        end;

        battle_game.randomRange temp 1 100;
        #debug_log "randomNumber" temp;
        #debug_log "dodgeChance" dodgeChance;

        if gt temp dodgeChance;
          #debug_log "hitUnit | dodge scripts | Target failed to dodge. Aborting.";
          return power part side;
        end;

        #debug_log "miss";
        battle_game.getAnimFrame temp;
        unit.setTag Tag.LAST_DODGE_FRAME temp;
        unit.setTag Tag.DODGED 1;
        add counterSuccessfulDodges 1;
        unit.setTag Tag.UNIT_COUNTER_SUCCESSFUL_DODGES counterSuccessfulDodges;

        battle_game.flashMessage "STR_SCRIPT_DODGED";
        return 0 part side;

      recolorUnitSprite: |
        var int temp;

        # add sprite_index sprite_offset;

        unit.getTag temp Tag.LAST_DODGE_FRAME;
        if gt temp 3;
          sub temp anim_frame;
          if gt temp -2; #only 3 frames after hit have changed color
            set_color new_pixel COLOR_X1_BLUE1;
          end;
        end;


        unit.getRecolor new_pixel;
        add_burn_shade new_pixel burn shade;
        return new_pixel;

#
  - type: STR_SCOUT_SMT_UC          # Scout Armor
    refNode: *STR_DODGE_ARMOR
  - type: STR_SCOUT_SGT_UC          # Scout Sergeant Armor
    refNode: *STR_DODGE_ARMOR

  - type: STR_ASS_ARMOR_HONOR_CLAW  # Vanguard Armor with Claw
    refNode: *STR_DODGE_ARMOR
  - type: STR_ASS_ARMOR_HONOR_SHIELD # Vanguard Armor with Shield
    refNode: *STR_DODGE_ARMOR

  - type: STR_CHAP_ASSAULT_UC       # Chaplain Assault Armor
    refNode: *STR_DODGE_ARMOR

  - type: STR_CAPTAIN_ASS           # Captain Assault Armor
    refNode: *STR_DODGE_ARMOR
  - type: STR_CAPTAIN_ASS_CLAW      # Captain Assault (Claw)
    refNode: *STR_DODGE_ARMOR
  - type: STR_CAPTAIN_ASS_SHIELD    # Captain Assault (Shield)
    refNode: *STR_DODGE_ARMOR
  - type: STR_CAPTAIN_SCOUT         # Captain Scout Armor
    refNode: *STR_DODGE_ARMOR

###PRIMARIS (tags defined in SMT_armor.rul)
  - type: STR_MKX_ASS_LV1_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_ASS_LV2_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_ASS_LV3_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_ASS_LV4_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_ASS_LV5_UC
    refNode: *STR_DODGE_ARMOR

  - type: STR_MKX_PHB_LV1_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_PHB_LV2_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_PHB_LV3_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_PHB_LV4_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_PHB_LV5_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_ELIM_LV3_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_ELIM_LV4_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_ELIM_LV5_UC
    refNode: *STR_DODGE_ARMOR

###DEATHWATCH (tags defined in DW_armor.rul)
  - type: STR_DW_SCOUT_BA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_SCOUT_BT_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_SCOUT_CF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_SCOUT_DA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_SCOUT_IF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_SCOUT_SALA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_SCOUT_SW_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_SCOUT_ULTRA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_SCOUT_WS_UC
    refNode: *STR_DODGE_ARMOR

  - type: STR_MKX_DW_PHB_BA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHB_BT_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHB_CF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHB_DA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHB_IF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHB_SALA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHB_SW_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHB_ULTRA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHB_WS_UC
    refNode: *STR_DODGE_ARMOR

  - type: STR_MKX_DW_PHBELIM_BA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHBELIM_BT_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHBELIM_CF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHBELIM_DA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHBELIM_IF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHBELIM_SALA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHBELIM_SW_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHBELIM_ULTRA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_PHBELIM_WS_UC
    refNode: *STR_DODGE_ARMOR

  - type: STR_DW_ASS_ARMOR_BA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_ASS_ARMOR_BT_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_ASS_ARMOR_CF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_ASS_ARMOR_DA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_ASS_ARMOR_IF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_ASS_ARMOR_SALA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_ASS_ARMOR_SW_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_ASS_ARMOR_ULTRA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_DW_ASS_ARMOR_WS_UC
    refNode: *STR_DODGE_ARMOR

  - type: STR_MKX_DW_INC_BA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INC_BT_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INC_CF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INC_DA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INC_IF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INC_SALA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INC_SW_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INC_ULTRA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INC_WS_UC
    refNode: *STR_DODGE_ARMOR

  - type: STR_MKX_DW_INCAC_BA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCAC_BT_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCAC_CF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCAC_DA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCAC_IF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCAC_SALA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCAC_SW_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCAC_ULTRA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCAC_WS_UC
    refNode: *STR_DODGE_ARMOR

  - type: STR_MKX_DW_INCPE_BA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCPE_BT_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCPE_CF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCPE_DA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCPE_IF_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCPE_SALA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCPE_SW_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCPE_ULTRA_UC
    refNode: *STR_DODGE_ARMOR
  - type: STR_MKX_DW_INCPE_WS_UC
    refNode: *STR_DODGE_ARMOR

  - type: STR_DW_LEADER_BA_UC
    refNode: *STR_DODGE_ARMOR

