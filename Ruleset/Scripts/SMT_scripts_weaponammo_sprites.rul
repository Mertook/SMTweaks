extended:
  tagsFile: Ruleset/Scripts/SMT_tags.rul

  scripts:
    recolorItemSprite:
      - override: 40k_rIS_cosmetic_sprites_based_on_ammo # Updated to handle guns with multiple ammo slots
        offset: 10
        code: |
          var ptr BattleItem ammoItem;
          var ptr RuleItem weaponRuleset;
          var ptr RuleItem ammoRuleset;
          var int weaponColor;
          var int color;
          var int ammoColor;

          item.getRuleItem weaponRuleset;
          weaponRuleset.getTag weaponColor Tag.ITEM_COLOR_CHANGES_WITH_AMMO;
          if eq weaponColor 0;
            return new_pixel;
          end;

          get_color color new_pixel;

          item.getAmmoItem ammoItem;
          ammoItem.getRuleItem ammoRuleset;
          ammoRuleset.getTag ammoColor Tag.ITEM_AMMO_COLOR;
          if eq ammoColor 0;
            item.getAmmoForSlot ammoItem 1;
            ammoItem.getRuleItem ammoRuleset;
            ammoRuleset.getTag ammoColor Tag.ITEM_AMMO_COLOR;
          end;

          if eq color weaponColor;
            if neq 0 ammoColor;
              set_color new_pixel ammoColor;
              ammoRuleset.getTag ammoColor Tag.ITEM_AMMO_SHADE;
              add ammoColor shade;
            else;
              set_color new_pixel 0;
              set ammoColor shade;
            end;
            add_shade new_pixel ammoColor;
          end;

          return new_pixel;

items:
  - &REF_WEAPON_AMMO_SPRITE_SWAP
    type: STR_RIFLE
    scripts:
      selectItemSprite: |
        var ptr BattleItem ammoItem;
        var ptr RuleItem ammoRuleset;
        var int skipBigobs;

        item.getAmmoItem ammoItem;
        ammoItem.getRuleItem ammoRuleset;
        ammoRuleset.getTag skipBigobs Tag.ITEM_AMMO_SKIP_BIGOBS;

        if eq skipBigobs 0; # handle weapons with multiple ammo types
          item.getAmmoForSlot ammoItem 1;
          ammoItem.getRuleItem ammoRuleset;
          ammoRuleset.getTag skipBigobs Tag.ITEM_AMMO_SKIP_BIGOBS;
        end;

        if and gt skipBigobs 0 eq blit_part blit_item_big;
          add sprite_index skipBigobs;
        else;
          add sprite_index sprite_offset;
        end;

        return sprite_index;

### Relevant ammo needs the tag ITEM_AMMO_SKIP_BIGOBS
  - &REF_AMMO_SKIP_ONE
    type: STR_LIGHT_BOLTPISTOL_AMMO
    tags:
      ITEM_AMMO_SKIP_BIGOBS: 1
  - &REF_AMMO_SKIP_TWO
    type: STR_LIGHT_BOLTER_AMMO
    tags:
      ITEM_AMMO_SKIP_BIGOBS: 2

### Boltpistol Ammo
  - update: STR_PISTOL_CLIP
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_LIGHT_BOLTPISTOL_AMMO
    refNode: *REF_AMMO_SKIP_ONE
  - update: STR_PISTOL_CLIP_AP
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_LIGHT_BOLTPISTOL_AMMO_AP
    refNode: *REF_AMMO_SKIP_ONE
  - update: STR_PISTOL_CLIP_MC
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_LIGHT_BOLTPISTOL_AMMO_MC
    refNode: *REF_AMMO_SKIP_ONE
  - update: STR_PISTOL_CLIP_EX
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_LIGHT_BOLTPISTOL_AMMO_EX
    refNode: *REF_AMMO_SKIP_ONE
  - update: STR_PISTOL_CLIP_EX
    refNode: *REF_AMMO_SKIP_ONE
  - update: STR_BOLTPISTOL_HELFROST_CLIP
    refNode: *REF_AMMO_SKIP_ONE
  - update: STR_BOLTPISTOL_HELFROST_CLIP_MC
    refNode: *REF_AMMO_SKIP_ONE
  - update: STR_LIGHT_BOLTPISTOL_SERAPHIM_AMMO
    refNode: *REF_AMMO_SKIP_ONE
### Bolter Ammo
  - type: STR_RIFLE_CLIP
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_LIGHT_BOLTER_AMMO
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_RIFLE_CLIP_AP
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_LIGHT_BOLTER_AMMO_PEN
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_RIFLE_CLIP_MC
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_LIGHT_BOLTER_AMMO_MC
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_RIFLE_CLIP_EX
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_LIGHT_BOLTER_AMMO_EX
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_LIGHT_BOLTER_AMMO_AP
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_LIGHT_BOLTER_AMMO_INF
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_CANTUS_BOLTER_AMMO
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_RIFLE_CLIP_DEREV
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_RIFLE_CLIP_FUSION
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_RIFLE_CLIP_DRAGON
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_BOLTER_HELFROST_CLIP
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_BOLTER_HELFROST_CLIP_MC
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_RIFLE_CLIP_DOM
    refNode: *REF_AMMO_SKIP_TWO
### Heavy Boltrifle Ammo
  - type: STR_BOLTRIFLE_DRUM
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_BOLTRIFLE_DRUM_AP
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_BOLTRIFLE_DRUM_EX
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_BOLTRIFLE_DRUM_MC
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_BOLTRIFLE_DRUM_MC_DW
    refNode: *REF_AMMO_SKIP_ONE
### Dreadnought Missiles
  - type: STR_DREAD_MISSILES
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_HWP_FUSION_BOMB
    refNode: *REF_AMMO_SKIP_ONE
### Castellan Missiles
  - type: STR_CASTELLAN_HE
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_CASTELLAN_KRAK
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_CASTELLAN_INCIN
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_CASTELLAN_DEFOREST
    refNode: *REF_AMMO_SKIP_ONE
### Autogun Ammo
  - type: STR_AUTOGUN_CLIP
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_AUTOGUN_CLIP_AP
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_AUTOGUN_CLIP_HP
    refNode: *REF_AMMO_SKIP_ONE
  - type: STR_AUTOGUN_CLIP_DRUM
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_AUTOGUN_CLIP_DRUM_KRAKEN
    refNode: *REF_AMMO_SKIP_TWO
  - type: STR_AUTOGUN_CLIP_DRUM_HP
    refNode: *REF_AMMO_SKIP_TWO

### Weapons ###
### Bolters
  - type: STR_RIFLE                 # Bolter (Godwyn)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_RIFLEA                # Bolter (Artifex)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_RIFLEB                # Bolter (Ultra)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_RIFLEC                # Bolter (Stalker)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_RIFLED                # Bolt Rifle (Cawl)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_RIFLEDW               # Bolt Rifle (Cawl DW)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_MCRIFLE               # Bolter (Mastercrafted)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTRIFLE_STERNGUARD  # Bolt Rifle (Sternguard)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTRIFLE_SCOPE       # Bolt Rifle (Stalker)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTRIFLE_GL          # Bolt Rifle (Combi GL)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTRIFLE_MC          # Bolt Rifle (Mastercrafted)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_CARBINE        # Bolt Carbine
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_CARBINE_SCOPE  # Bolt Carbine (Occulus)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_HEAVY_BOLTRIFLE       # Heavy Bolt Rifle
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_HEAVY_BOLTRIFLE_DW    # Heavy Bolt Rifle (DW Captain)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_FENRIS         # Bolter (Fenris)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_FENRIS_MC      # Bolter (Fenris MC)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_DOMINION       # Bolter (Dominion)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_ENFORCER       # Light Bolter (Enforcer)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_LOCKE          # Light Bolter (Locke)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_LIGHT_ULTRA    # Light Bolter (Ultra)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_MC_BOLTER_DEAZ        # Light Bolter (Mastercrafted)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_LIGHT_UMBRA    # Light Bolter (Umbra)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_LIGHT_UMBRA_UNDERSLUNG # Light Bolter (Umbra GL)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_MC_UMBRA_GL           # Light Bolter (Umbra MC)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_CANTUS         # Light Bolter (Cantus)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_DEAZ           # Light Bolter (Deaz)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_ELOHIM         # Light Bolter (Elohim)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_HELLSPITE      # Light Bolter (Hellspite)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTER_MEPHISTO       # Light Bolter (Mephisto)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_ADEPTAS_BOLTGUN_JOVE  # Bolter (Jove)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP

### Boltpistols
  - type: STR_PISTOL                # Boltpistol (Ceres)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_PISTOLB               # Boltpistol (Ultra)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_MCPISTOL              # Boltpistol (Mastercrafted)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_PISTOLS               # Boltpistol (Spectris)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_PISTOLH_SM            # Boltpistol (Tigrus)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTPISTOL_FENRIS     # Boltpistol (Fenris)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTPISTOL_FENRIS_MC  # Boltpistol (Fenris MC)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTPISTOL_DEAZ       # Light Boltpistol (Deaz)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTPISTOL_LIGHT_ULTRA    # Light Boltpistol (Ultra)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_MC_BOLTPISTOL_DEAZ    # Light Boltpistol (Mastercrafted)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTPISTOL_SCOURGE    # Light Boltpistol (Scourge)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_BOLTPISTOL_SERAPHIM   # Light Boltpistol (Seraphim)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP

### Autoguns
  - type: STR_AUTOGUN_BASIC         # Autogun (Basic)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_AUTOGUN_ADV           # Autogun (High Grade)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_AUTOGUN_ADVGL         # Autogun (High Grade GL)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_AUTOGUN_AGRI          # Autogun (Agripinaa Carbine)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_AUTOGUN_AGRI_B        # Autogun (Agripinaa Carbine Scoped)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_AUTOGUN_ARMA          # Autogun (Armageddon)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_AUTOGUN_ARMA_B        # Autogun (Armageddon Bayonet)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP
  - type: STR_AUTOGUN_HEAD          # Autogun (Headhunter)
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP


  - type: AUX_HOVERTANK_LAUNCHER    # Dreadnought Missile Launcher
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP

  - type: STR_VENGOR_LAUNCHER       # Vengor Missile Launcher
    refNode: *REF_WEAPON_AMMO_SPRITE_SWAP


  - type: STR_FORCE_BLADE            # Force Blade
    scripts: # blade shine
      selectItemSprite: |
        var int temp;
        var int currentHeat;
        var int maxHeat;
        var ptr BattleItem heldItem;
        var ptr BattleUnit user;
        var ptr RuleSoldier unitSoldier;


        battle_game.getTurn temp;
        if eq temp 0;
          return sprite_index;
        end;

        if or eq blit_part blit_item_lefthand eq blit_part blit_item_righthand; # handob animation
            add temp anim_frame;
            mod temp 4;
            mul temp 8;
            add sprite_index temp;
        end;

        if eq blit_part blit_item_big; # if bigob, check if held in hands by valid user
          item.getOwner user;
          user.getRuleSoldier unitSoldier;
          unitSoldier.getTag temp Tag.SMT_RESTRICTED_ITEM_USER;
          div temp 4; # psyker
          mod temp 2;
          if eq temp 0;
            return sprite_index;
          end;

          user.getLeftHandWeapon heldItem;
          if neq heldItem item;
            user.getRightHandWeapon heldItem;
            if neq heldItem item;
              return sprite_index;
            end;
          end;
          add sprite_index 1;

          user.Stats.getPsiSkill temp;
          if ge temp 100; #overcharged
            add sprite_index 1;
          end;

        end;

        add sprite_index sprite_offset;
        return sprite_index;


      recolorItemSprite: |
        var int origColor;
        var int origShade;
        var int waveVal;
        var int newShade;
        var int temp;
        var ptr BattleItem heldItem;
        var ptr BattleUnit user;
        var ptr RuleSoldier unitSoldier;

        if eq blit_part blit_item_big;

          item.getOwner user;
          user.getRuleSoldier unitSoldier;
          unitSoldier.getTag temp Tag.SMT_RESTRICTED_ITEM_USER;
          div temp 4; # psyker
          mod temp 2;
          if eq temp 0;
            return new_pixel;
          end;

          user.getLeftHandWeapon heldItem;
          if neq heldItem item;
            user.getRightHandWeapon heldItem;
            if neq heldItem item;
              return new_pixel;
            end;
          end;

          get_color origColor new_pixel;
          get_shade origShade new_pixel;

          begin; # handle lightning animation
            var int maskColor 4; # light green
            var int sparkColor 14; # light purple
            if eq origColor maskColor;
              set waveVal anim_frame;
              mod waveVal 4;
              set temp 1;
              shl temp waveVal;
              set newShade origShade;
              add newShade 1;
              div newShade temp;
              mod newShade 2;
              if eq newShade 1;
                set_color new_pixel sparkColor;
                #battle_game.randomRange newShade 0 3;
                set_shade new_pixel 0;
              else;
                set_color new_pixel 0;
                set_shade new_pixel 0;
              end;
            end;
          end;

          begin; # handle power core
            var int maskColor 13; # bright blue
            if eq origColor maskColor;
              set waveVal anim_frame;
              wavegen_tri waveVal 32 32 31;
              abs waveVal;
              set newShade origShade;
              sub newShade waveVal;
              set temp origShade;
              add temp 16;
              if and le waveVal origShade ge waveVal temp;
                div newShade 2;
                limit newShade 0 2;
              else;
                abs newShade;
                limit newShade 4 8;
              end;
              set_shade new_pixel newShade;
            end;
          end;

          begin; # handle blade
            var int maskColor 7; # light blue
            set temp maskColor;
            add temp 1; # normal blue
            if or eq origColor maskColor eq origColor temp;
              set waveVal anim_frame;
              wavegen_tri waveVal 16 8 8;
              div waveVal 2;
              set newShade origShade;
              add newShade waveVal;
              limit_lower newShade 0;
              set_shade new_pixel newShade;
            end;
          end;

        end;

        return new_pixel;
